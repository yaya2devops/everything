/// <reference types="node" />
type OembedMetadata<Type extends string> = {
    version: '1.0';
    type: Type;
    url: string;
    metadata: {
        title: string | null;
        description: string | null;
        publisher: string | null;
        author: string | null;
        thumbnail: string | null;
        icon: string | null;
    };
    body?: Type extends 'mention' ? string : unknown;
    contentType?: Type extends 'mention' ? string : unknown;
};
type OEmbedService = {
    fetchOembedDataFromUrl<Type extends string>(url: string, type: Type, options?: {
        timeout?: number;
    }): Promise<OembedMetadata<Type>>;
};
type ExternalRequest = {
    get(url: string, options: object): Promise<{
        statusCode: number;
        body: string;
    }>;
};
export type RecommendationMetadata = {
    title: string | null;
    excerpt: string | null;
    featuredImage: URL | null;
    favicon: URL | null;
    oneClickSubscribe: boolean;
};
export declare class RecommendationMetadataService {
    #private;
    constructor(dependencies: {
        oembedService: OEmbedService;
        externalRequest: ExternalRequest;
    });
    fetch(url: URL, options?: {
        timeout: number;
    }): Promise<RecommendationMetadata>;
}
export {};
