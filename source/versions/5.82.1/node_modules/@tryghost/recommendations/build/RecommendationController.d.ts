import { RecommendationService } from './RecommendationService';
type Frame = {
    data: unknown;
    options: unknown;
    user: unknown;
};
export declare class RecommendationController {
    #private;
    service: RecommendationService;
    constructor(deps: {
        service: RecommendationService;
    });
    read(frame: Frame): Promise<{
        data: {
            id: string | null;
            title: string | null;
            description: string | null;
            excerpt: string | null;
            featured_image: string | null;
            favicon: string | null;
            url: string | null;
            one_click_subscribe: boolean | null;
            created_at: string | null;
            updated_at: string | null;
            count: {
                clicks: number | undefined;
                subscribers: number | undefined;
            } | undefined;
        }[];
        meta: any;
    }>;
    add(frame: Frame): Promise<{
        data: {
            id: string | null;
            title: string | null;
            description: string | null;
            excerpt: string | null;
            featured_image: string | null;
            favicon: string | null;
            url: string | null;
            one_click_subscribe: boolean | null;
            created_at: string | null;
            updated_at: string | null;
            count: {
                clicks: number | undefined;
                subscribers: number | undefined;
            } | undefined;
        }[];
        meta: any;
    }>;
    /**
     * Given a recommendation URL, returns either an existing recommendation with that url and updated metadata,
     * or the metadata from that URL as if it would create a new one (without creating a new one)
     *
     * This can be used in the frontend when creating a new recommendation (duplication checking + showing a preview before saving)
     */
    check(frame: Frame): Promise<{
        data: {
            id: string | null;
            title: string | null;
            description: string | null;
            excerpt: string | null;
            featured_image: string | null;
            favicon: string | null;
            url: string | null;
            one_click_subscribe: boolean | null;
            created_at: string | null;
            updated_at: string | null;
            count: {
                clicks: number | undefined;
                subscribers: number | undefined;
            } | undefined;
        }[];
        meta: any;
    }>;
    edit(frame: Frame): Promise<{
        data: {
            id: string | null;
            title: string | null;
            description: string | null;
            excerpt: string | null;
            featured_image: string | null;
            favicon: string | null;
            url: string | null;
            one_click_subscribe: boolean | null;
            created_at: string | null;
            updated_at: string | null;
            count: {
                clicks: number | undefined;
                subscribers: number | undefined;
            } | undefined;
        }[];
        meta: any;
    }>;
    destroy(frame: Frame): Promise<void>;
    browse(frame: Frame): Promise<{
        data: {
            id: string | null;
            title: string | null;
            description: string | null;
            excerpt: string | null;
            featured_image: string | null;
            favicon: string | null;
            url: string | null;
            one_click_subscribe: boolean | null;
            created_at: string | null;
            updated_at: string | null;
            count: {
                clicks: number | undefined;
                subscribers: number | undefined;
            } | undefined;
        }[];
        meta: any;
    }>;
    trackClicked(frame: Frame): Promise<void>;
    trackSubscribed(frame: Frame): Promise<void>;
}
export {};
