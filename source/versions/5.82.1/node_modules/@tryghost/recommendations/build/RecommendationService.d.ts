/// <reference types="node" />
import { IncludeOption, OrderOption } from '@tryghost/bookshelf-repository';
import { InMemoryRepository } from '@tryghost/in-memory-repository';
import { ClickEvent } from './ClickEvent';
import { AddRecommendation, Recommendation, RecommendationPlain } from './Recommendation';
import { RecommendationRepository } from './RecommendationRepository';
import { SubscribeEvent } from './SubscribeEvent';
import { WellknownService } from './WellknownService';
import { RecommendationMetadataService } from './RecommendationMetadataService';
type MentionSendingService = {
    sendAll(options: {
        url: URL;
        links: URL[];
    }): Promise<void>;
};
type RecommendationEnablerService = {
    getSetting(): string;
    setSetting(value: string): Promise<void>;
};
export declare class RecommendationService {
    #private;
    repository: RecommendationRepository;
    clickEventRepository: InMemoryRepository<string, ClickEvent>;
    subscribeEventRepository: InMemoryRepository<string, SubscribeEvent>;
    wellknownService: WellknownService;
    mentionSendingService: MentionSendingService;
    recommendationEnablerService: RecommendationEnablerService;
    recommendationMetadataService: RecommendationMetadataService;
    constructor(deps: {
        repository: RecommendationRepository;
        clickEventRepository: InMemoryRepository<string, ClickEvent>;
        subscribeEventRepository: InMemoryRepository<string, SubscribeEvent>;
        wellknownService: WellknownService;
        mentionSendingService: MentionSendingService;
        recommendationEnablerService: RecommendationEnablerService;
        recommendationMetadataService: RecommendationMetadataService;
    });
    init(): Promise<void>;
    updateAllRecommendationsMetadata(): Promise<void>;
    updateWellknown(recommendations: Recommendation[]): Promise<void>;
    updateRecommendationsEnabledSetting(recommendations: Recommendation[]): Promise<void>;
    private sendMentionToRecommendation;
    readRecommendation(id: string): Promise<RecommendationPlain>;
    addRecommendation(addRecommendation: AddRecommendation): Promise<RecommendationPlain>;
    checkRecommendation(url: URL): Promise<Partial<RecommendationPlain>>;
    _updateRecommendationMetadata(recommendation: Recommendation): Promise<void>;
    editRecommendation(id: string, recommendationEdit: Partial<Recommendation>): Promise<RecommendationPlain>;
    deleteRecommendation(id: string): Promise<void>;
    listRecommendations(options?: {
        filter?: string;
        order?: OrderOption<Recommendation>;
        page?: number;
        limit?: number | 'all';
        include?: IncludeOption<Recommendation>;
    }): Promise<RecommendationPlain[]>;
    countRecommendations({ filter }: {
        filter?: string;
    }): Promise<number>;
    trackClicked({ id, memberId }: {
        id: string;
        memberId?: string;
    }): Promise<void>;
    trackSubscribed({ id, memberId }: {
        id: string;
        memberId: string;
    }): Promise<void>;
    readRecommendationByUrl(url: URL): Promise<RecommendationPlain | null>;
}
export {};
