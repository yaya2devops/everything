"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExampleService = void 0;
/**
 * Service
 *
 * These implement Use Cases of the system, they should use repositories, entities and other services to coordinate these Use Cases
 *
 * Business logic should only go in here if it does not fall in the domain of a single entity.
 */
const common_1 = require("@nestjs/common");
let ExampleService = class ExampleService {
    repository;
    constructor(repository) {
        this.repository = repository;
    }
    async greet(recipient) {
        const greeting = await this.repository.getOne('Greetings');
        const message = greeting.greet(recipient);
        await this.repository.save(greeting);
        return message;
    }
};
exports.ExampleService = ExampleService;
exports.ExampleService = ExampleService = __decorate([
    __param(0, (0, common_1.Inject)('ExampleRepository')),
    __metadata("design:paramtypes", [Object])
], ExampleService);
//# sourceMappingURL=example.service.js.map