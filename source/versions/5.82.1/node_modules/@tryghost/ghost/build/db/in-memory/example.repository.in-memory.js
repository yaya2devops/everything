"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExampleRepositoryInMemory = void 0;
/**
 * Repository Implementation
 *
 * Can be in-memory, knex based, bookshelf based, redis based, whatever...
 *
 * No business logic
 * No modification of Entities - they just store what they're given, or fetch what they're asked for
 * They should dispatch and clear the events of an entity when tehy successfully persist it.
 */
const common_1 = require("@nestjs/common");
const example_entity_1 = require("../../core/example/example.entity");
let ExampleRepositoryInMemory = class ExampleRepositoryInMemory {
    events;
    constructor(events) {
        this.events = events;
    }
    async getOne(greeting) {
        const entity = new example_entity_1.Greeting({
            greeting: greeting.trim()
        });
        return entity;
    }
    async save(entity) {
        example_entity_1.Greeting.getEventsToDispatch(entity, (events) => {
            for (const event of events) {
                this.events.dispatch(event);
            }
        });
    }
};
exports.ExampleRepositoryInMemory = ExampleRepositoryInMemory;
exports.ExampleRepositoryInMemory = ExampleRepositoryInMemory = __decorate([
    __param(0, (0, common_1.Inject)('DomainEvents')),
    __metadata("design:paramtypes", [Object])
], ExampleRepositoryInMemory);
//# sourceMappingURL=example.repository.in-memory.js.map