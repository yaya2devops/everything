"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocationHeaderInterceptor = void 0;
const common_1 = require("@nestjs/common");
const operators_1 = require("rxjs/operators");
let LocationHeaderInterceptor = class LocationHeaderInterceptor {
    intercept(context, next) {
        if (context.getType() !== 'http') {
            return next.handle();
        }
        const [req, res] = context.getArgs();
        if (req.method !== 'POST') {
            return next.handle();
        }
        function getLocationHeader(responseData) {
            if (typeof responseData !== 'object' || responseData === null) {
                return;
            }
            const keys = Object.keys(responseData);
            if (keys.length !== 1) {
                return;
            }
            const data = Reflect.get(responseData, keys[0]);
            if (!Array.isArray(data)) {
                return;
            }
            if (data.length !== 1) {
                return;
            }
            const id = data[0].id;
            if (!id || typeof id !== 'string') {
                return;
            }
            const url = new URL('https://ghost.io');
            url.protocol = req.secure ? 'https:' : 'http:';
            // We use `any` here because we haven't yet extended the express Request object with the vhost plugin types
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            url.host = req.vhost ? req.vhost.host : req.get('host');
            url.pathname = req.path;
            url.pathname += `${id}/`;
            return url;
        }
        return next.handle().pipe((0, operators_1.tap)((data) => {
            const location = getLocationHeader(data);
            if (location) {
                res.set('location', location.href);
            }
        }));
    }
};
exports.LocationHeaderInterceptor = LocationHeaderInterceptor;
exports.LocationHeaderInterceptor = LocationHeaderInterceptor = __decorate([
    (0, common_1.Injectable)()
], LocationHeaderInterceptor);
//# sourceMappingURL=location-header.interceptor.js.map