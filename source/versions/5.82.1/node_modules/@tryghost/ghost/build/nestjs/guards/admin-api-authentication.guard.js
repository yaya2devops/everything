"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdminAPIAuthentication = void 0;
const common_1 = require("@nestjs/common");
const bson_objectid_1 = __importDefault(require("bson-objectid"));
let AdminAPIAuthentication = class AdminAPIAuthentication {
    sessionService;
    authService;
    constructor(sessionService, authService) {
        this.sessionService = sessionService;
        this.authService = authService;
    }
    async canActivate(context) {
        const request = context.switchToHttp().getRequest();
        const response = context.switchToHttp().getResponse();
        const user = await this.sessionService.getUserForSession(request, response);
        if (user) {
            await this.setUserActor(user, request);
            return true;
        }
        if (!request.headers || !request.headers.authorization) {
            return false;
        }
        const [scheme, token] = request.headers.authorization.split(' ');
        if (!/^Ghost$/i.test(scheme)) {
            return false;
        }
        const { apiKey, user: apiUser } = await this.authService.authenticateWithToken(request.originalUrl, token, false);
        if (user) {
            await this.setUserActor(apiUser, request);
            return true;
        }
        if (apiKey) {
            await apiKey.related('role').fetch();
            const json = apiKey.toJSON();
            request.actor = {
                id: bson_objectid_1.default.createFromHexString(json.integration.id),
                role: json.role.name,
                type: 'api_key'
            };
            return true;
        }
        return false;
    }
    // This is `any` because again it represents a bookshelf model
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    async setUserActor(user, request) {
        await user.related('roles').fetch();
        const json = user.toJSON();
        request.actor = {
            // BS To work around Owner id === 1
            id: bson_objectid_1.default.createFromHexString(json.id === '1' ? 'DEAD01D0DEAD01D0DEAD01D0' : json.id),
            role: json.roles[0].name,
            type: 'user'
        };
    }
};
exports.AdminAPIAuthentication = AdminAPIAuthentication;
exports.AdminAPIAuthentication = AdminAPIAuthentication = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, common_1.Inject)('SessionService')),
    __param(1, (0, common_1.Inject)('AdminAuthenticationService')),
    __metadata("design:paramtypes", [Object, Object])
], AdminAPIAuthentication);
//# sourceMappingURL=admin-api-authentication.guard.js.map